// <auto-generated />
using System;
using App.Infra.Data.SqlServer.Ef.DbCntx;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace App.Infra.Data.SqlServer.Ef.Migrations
{
    [DbContext(typeof(BazarcheContext))]
    partial class BazarcheContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("App.Domain.Core._Booth.Entities.Booth", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountBalance")
                        .HasColumnType("int");

                    b.Property<int?>("AvatarPictureId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("MedalId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("TotalSell")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AvatarPictureId")
                        .IsUnique()
                        .HasFilter("[AvatarPictureId] IS NOT NULL");

                    b.HasIndex("MedalId");

                    b.ToTable("Booths");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccountBalance = 0,
                            AvatarPictureId = 16,
                            Description = "عرضه کننده انواع محصولات",
                            IsActive = true,
                            IsDeleted = false,
                            MedalId = 1,
                            Name = "رویال ",
                            TotalSell = 0
                        },
                        new
                        {
                            Id = 2,
                            AccountBalance = 2300000,
                            AvatarPictureId = 17,
                            Description = "شیک پوشی شما با ما",
                            IsActive = true,
                            IsDeleted = false,
                            MedalId = 2,
                            Name = "نوین",
                            TotalSell = 2300000
                        });
                });

            modelBuilder.Entity("App.Domain.Core._Booth.Entities.Medal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FeePercentage")
                        .HasColumnType("int");

                    b.Property<int>("MinSalesRequired")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Medals");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FeePercentage = 10,
                            MinSalesRequired = 0,
                            Name = "Default"
                        },
                        new
                        {
                            Id = 2,
                            FeePercentage = 8,
                            MinSalesRequired = 3000000,
                            Name = "Silver"
                        },
                        new
                        {
                            Id = 3,
                            FeePercentage = 5,
                            MinSalesRequired = 10000000,
                            Name = "Gold"
                        });
                });

            modelBuilder.Entity("App.Domain.Core._Common.Entities.Picture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Pictures");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 11, 18, 15, 21, 30, 484, DateTimeKind.Local).AddTicks(795),
                            ImageUrl = "102140ea60e0fd478b09b279976a095c95615b6_1656161174.png",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 11, 18, 15, 21, 30, 484, DateTimeKind.Local).AddTicks(819),
                            ImageUrl = "202140ea60e0fd478b09b279976a095c95615b6_1656161174.png",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2023, 11, 18, 15, 21, 30, 484, DateTimeKind.Local).AddTicks(823),
                            ImageUrl = "302140ea60e0fd478b09b279976a095c95615b6_1656161174.png",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2023, 11, 18, 15, 21, 30, 484, DateTimeKind.Local).AddTicks(825),
                            ImageUrl = "402140ea60e0fd478b09b279976a095c95615b6_1656161174.png",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2023, 11, 18, 15, 21, 30, 484, DateTimeKind.Local).AddTicks(834),
                            ImageUrl = "502140ea60e0fd478b09b279976a095c95615b6_1656161174.png",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2023, 11, 18, 15, 21, 30, 484, DateTimeKind.Local).AddTicks(837),
                            ImageUrl = "602140ea60e0fd478b09b279976a095c95615b6_1656161174.png",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2023, 11, 18, 15, 21, 30, 484, DateTimeKind.Local).AddTicks(838),
                            ImageUrl = "702140ea60e0fd478b09b279976a095c95615b6_1656161174.png",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2023, 11, 18, 15, 21, 30, 484, DateTimeKind.Local).AddTicks(847),
                            ImageUrl = "802140ea60e0fd478b09b279976a095c95615b6_1656161174.png",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2023, 11, 18, 15, 21, 30, 484, DateTimeKind.Local).AddTicks(862),
                            ImageUrl = "902140ea60e0fd478b09b279976a095c95615b6_1656161174.png",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2023, 11, 18, 15, 21, 30, 484, DateTimeKind.Local).AddTicks(864),
                            ImageUrl = "102140ea60e0fd478b09b279976a095c95615b6_1656161174.png",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(2023, 11, 18, 15, 21, 30, 484, DateTimeKind.Local).AddTicks(867),
                            ImageUrl = "112140ea60e0fd478b09b279976a095c95615b6_1656161174.png",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTime(2023, 11, 18, 15, 21, 30, 484, DateTimeKind.Local).AddTicks(869),
                            ImageUrl = "5522140ea60e0fd478b09b279976a095c95615b6_1656161174.jpg",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 13,
                            CreatedAt = new DateTime(2023, 11, 18, 15, 21, 30, 484, DateTimeKind.Local).AddTicks(871),
                            ImageUrl = "5502140ea60e0fd478b09b279976a095c95615b6_1656161174.jpg",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 14,
                            CreatedAt = new DateTime(2023, 11, 18, 15, 21, 30, 484, DateTimeKind.Local).AddTicks(873),
                            ImageUrl = "5512140ea60e0fd478b09b279976a095c95615b6_1656161174.jpg",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 15,
                            CreatedAt = new DateTime(2023, 11, 18, 15, 21, 30, 484, DateTimeKind.Local).AddTicks(875),
                            ImageUrl = "5532140ea60e0fd478b09b279976a095c95615b6_1656161174.jpg",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 16,
                            CreatedAt = new DateTime(2023, 11, 18, 15, 21, 30, 484, DateTimeKind.Local).AddTicks(877),
                            ImageUrl = "9902140ea60e0fd478b09b279976a095c95615b6_1656161174.jpg",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 17,
                            CreatedAt = new DateTime(2023, 11, 18, 15, 21, 30, 484, DateTimeKind.Local).AddTicks(879),
                            ImageUrl = "9912140ea60e0fd478b09b279976a095c95615b6_1656161174.jpg",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 18,
                            CreatedAt = new DateTime(2023, 11, 18, 15, 21, 30, 484, DateTimeKind.Local).AddTicks(881),
                            ImageUrl = "8802140ea60e0fd478b09b279976a095c95615b6_1656161174.jpg",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 19,
                            CreatedAt = new DateTime(2023, 11, 18, 15, 21, 30, 484, DateTimeKind.Local).AddTicks(883),
                            ImageUrl = "8812140ea60e0fd478b09b279976a095c95615b6_1656161174.jpg",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 20,
                            CreatedAt = new DateTime(2023, 11, 18, 15, 21, 30, 484, DateTimeKind.Local).AddTicks(885),
                            ImageUrl = "8822140ea60e0fd478b09b279976a095c95615b6_1656161174.jpg",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 21,
                            CreatedAt = new DateTime(2023, 11, 18, 15, 21, 30, 484, DateTimeKind.Local).AddTicks(887),
                            ImageUrl = "8832140ea60e0fd478b09b279976a095c95615b6_1656161174.jpg",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 22,
                            CreatedAt = new DateTime(2023, 11, 18, 15, 21, 30, 484, DateTimeKind.Local).AddTicks(889),
                            ImageUrl = "8842140ea60e0fd478b09b279976a095c95615b6_1656161174.jpg",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 23,
                            CreatedAt = new DateTime(2023, 11, 18, 15, 21, 30, 484, DateTimeKind.Local).AddTicks(891),
                            ImageUrl = "8852140ea60e0fd478b09b279976a095c95615b6_1656161174.jpg",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 24,
                            CreatedAt = new DateTime(2023, 11, 18, 15, 21, 30, 484, DateTimeKind.Local).AddTicks(893),
                            ImageUrl = "8862140ea60e0fd478b09b279976a095c95615b6_1656161174.jpg",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 25,
                            CreatedAt = new DateTime(2023, 11, 18, 15, 21, 30, 484, DateTimeKind.Local).AddTicks(895),
                            ImageUrl = "8872140ea60e0fd478b09b279976a095c95615b6_1656161174.jpg",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 26,
                            CreatedAt = new DateTime(2023, 11, 18, 15, 21, 30, 484, DateTimeKind.Local).AddTicks(897),
                            ImageUrl = "8882140ea60e0fd478b09b279976a095c95615b6_1656161174.jpg",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 27,
                            CreatedAt = new DateTime(2023, 11, 18, 15, 21, 30, 484, DateTimeKind.Local).AddTicks(899),
                            ImageUrl = "8892140ea60e0fd478b09b279976a095c95615b6_1656161174.jpg",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 28,
                            CreatedAt = new DateTime(2023, 11, 18, 15, 21, 30, 484, DateTimeKind.Local).AddTicks(900),
                            ImageUrl = "5532140ea60e0fd478b09b279976a095c95615b6_1656161174.jpg",
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("App.Domain.Core._Products.Entities.Attributes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Attributes");
                });

            modelBuilder.Entity("App.Domain.Core._Products.Entities.Auction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BasePrice")
                        .HasColumnType("int");

                    b.Property<int>("BoothId")
                        .HasColumnType("int");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("WinnerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BoothId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProductId");

                    b.ToTable("Auctions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BasePrice = 22000000,
                            BoothId = 1,
                            EndTime = new DateTime(2023, 11, 19, 15, 21, 31, 29, DateTimeKind.Local).AddTicks(7189),
                            IsConfirmed = true,
                            ProductId = 10,
                            StartTime = new DateTime(2023, 11, 18, 15, 21, 31, 29, DateTimeKind.Local).AddTicks(7165),
                            Status = 1
                        },
                        new
                        {
                            Id = 2,
                            BasePrice = 350000,
                            BoothId = 1,
                            EndTime = new DateTime(2023, 11, 19, 15, 21, 31, 29, DateTimeKind.Local).AddTicks(7200),
                            IsConfirmed = true,
                            ProductId = 2,
                            StartTime = new DateTime(2023, 11, 18, 16, 21, 31, 29, DateTimeKind.Local).AddTicks(7199),
                            Status = 0
                        },
                        new
                        {
                            Id = 3,
                            BasePrice = 25000000,
                            BoothId = 2,
                            EndTime = new DateTime(2023, 11, 19, 15, 21, 31, 29, DateTimeKind.Local).AddTicks(7202),
                            IsConfirmed = false,
                            ProductId = 8,
                            StartTime = new DateTime(2023, 11, 19, 15, 21, 31, 29, DateTimeKind.Local).AddTicks(7202),
                            Status = 0
                        });
                });

            modelBuilder.Entity("App.Domain.Core._Products.Entities.Bid", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AuctionId")
                        .HasColumnType("int");

                    b.Property<int>("BidPrice")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<bool>("IsCancelled")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AuctionId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Bids");
                });

            modelBuilder.Entity("App.Domain.Core._Products.Entities.BoothProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BoothId")
                        .HasColumnType("int");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("BoothId");

                    b.HasIndex("ProductId");

                    b.ToTable("BoothProducts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BoothId = 1,
                            Count = 10,
                            CreatedAt = new DateTime(2023, 11, 18, 15, 21, 31, 30, DateTimeKind.Local).AddTicks(2104),
                            IsDeleted = false,
                            Price = 800000,
                            ProductId = 1,
                            Status = true
                        },
                        new
                        {
                            Id = 2,
                            BoothId = 1,
                            Count = 5,
                            CreatedAt = new DateTime(2023, 11, 18, 15, 21, 31, 30, DateTimeKind.Local).AddTicks(2109),
                            IsDeleted = false,
                            Price = 900000,
                            ProductId = 9,
                            Status = true
                        },
                        new
                        {
                            Id = 3,
                            BoothId = 1,
                            Count = 10,
                            CreatedAt = new DateTime(2023, 11, 18, 15, 21, 31, 30, DateTimeKind.Local).AddTicks(2111),
                            IsDeleted = false,
                            Price = 1000000,
                            ProductId = 8,
                            Status = true
                        },
                        new
                        {
                            Id = 4,
                            BoothId = 1,
                            Count = 5,
                            CreatedAt = new DateTime(2023, 11, 18, 15, 21, 31, 30, DateTimeKind.Local).AddTicks(2113),
                            IsDeleted = false,
                            Price = 2000000,
                            ProductId = 3,
                            Status = true
                        },
                        new
                        {
                            Id = 5,
                            BoothId = 2,
                            Count = 10,
                            CreatedAt = new DateTime(2023, 11, 18, 15, 21, 31, 30, DateTimeKind.Local).AddTicks(2114),
                            IsDeleted = false,
                            Price = 3000000,
                            ProductId = 6,
                            Status = true
                        },
                        new
                        {
                            Id = 6,
                            BoothId = 2,
                            Count = 5,
                            CreatedAt = new DateTime(2023, 11, 18, 15, 21, 31, 30, DateTimeKind.Local).AddTicks(2116),
                            IsDeleted = false,
                            Price = 4000000,
                            ProductId = 2,
                            Status = true
                        },
                        new
                        {
                            Id = 7,
                            BoothId = 2,
                            Count = 10,
                            CreatedAt = new DateTime(2023, 11, 18, 15, 21, 31, 30, DateTimeKind.Local).AddTicks(2118),
                            IsDeleted = false,
                            Price = 5000000,
                            ProductId = 4,
                            Status = true
                        },
                        new
                        {
                            Id = 8,
                            BoothId = 2,
                            Count = 5,
                            CreatedAt = new DateTime(2023, 11, 18, 15, 21, 31, 30, DateTimeKind.Local).AddTicks(2120),
                            IsDeleted = false,
                            Price = 10000000,
                            ProductId = 9,
                            Status = true
                        });
                });

            modelBuilder.Entity("App.Domain.Core._Products.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<int?>("PictureId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("PictureId")
                        .IsUnique()
                        .HasFilter("[PictureId] IS NOT NULL");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            PictureId = 1,
                            Title = "کالای دیجیتال"
                        },
                        new
                        {
                            Id = 2,
                            PictureId = 2,
                            Title = "خانه و آشپزخانه"
                        },
                        new
                        {
                            Id = 3,
                            PictureId = 3,
                            Title = "مد و پوشاک"
                        },
                        new
                        {
                            Id = 4,
                            PictureId = 4,
                            Title = "کالاهای سوپر مارکتی"
                        },
                        new
                        {
                            Id = 5,
                            PictureId = 5,
                            Title = "کتاب و لوازم التحریر"
                        },
                        new
                        {
                            Id = 6,
                            PictureId = 6,
                            Title = "اسباب بازی ،کودک و نوزاد"
                        },
                        new
                        {
                            Id = 7,
                            PictureId = 7,
                            Title = "زیبایی و سلامت"
                        },
                        new
                        {
                            Id = 8,
                            PictureId = 8,
                            Title = "ورزش و سفر"
                        },
                        new
                        {
                            Id = 9,
                            PictureId = 9,
                            Title = "ابزار الات و تجهیزات"
                        },
                        new
                        {
                            Id = 10,
                            PictureId = 10,
                            Title = "خودرو و موتورسیکلت"
                        },
                        new
                        {
                            Id = 11,
                            PictureId = 11,
                            Title = "محصولات بومی محلی"
                        },
                        new
                        {
                            Id = 12,
                            ParentId = 1,
                            Title = "موبایل"
                        },
                        new
                        {
                            Id = 13,
                            ParentId = 1,
                            Title = "لبتاب"
                        },
                        new
                        {
                            Id = 14,
                            ParentId = 1,
                            Title = "لوازم جانبی لپ تاپ"
                        },
                        new
                        {
                            Id = 15,
                            ParentId = 1,
                            Title = "کامپیوتر"
                        },
                        new
                        {
                            Id = 16,
                            ParentId = 1,
                            Title = "لوازم جانبی گوشی"
                        },
                        new
                        {
                            Id = 17,
                            ParentId = 1,
                            Title = "کتابخوان"
                        },
                        new
                        {
                            Id = 18,
                            ParentId = 1,
                            Title = "واقعیت مجازی"
                        },
                        new
                        {
                            Id = 19,
                            ParentId = 1,
                            Title = "ساعت و مچ بند هوشمند"
                        },
                        new
                        {
                            Id = 20,
                            ParentId = 1,
                            Title = "تلوزیون"
                        },
                        new
                        {
                            Id = 21,
                            ParentId = 1,
                            Title = "هدفون، هدست، میکروفون"
                        },
                        new
                        {
                            Id = 22,
                            ParentId = 1,
                            Title = "اسپیکر بلوتوث و با سیم"
                        },
                        new
                        {
                            Id = 23,
                            ParentId = 1,
                            Title = "هارد، فلش و SSD"
                        },
                        new
                        {
                            Id = 24,
                            ParentId = 1,
                            Title = "دوربین"
                        },
                        new
                        {
                            Id = 25,
                            ParentId = 1,
                            Title = "لوازم جانبی دوربین"
                        },
                        new
                        {
                            Id = 26,
                            ParentId = 1,
                            Title = "تبلت"
                        },
                        new
                        {
                            Id = 27,
                            ParentId = 1,
                            Title = "کنسول بازی"
                        },
                        new
                        {
                            Id = 28,
                            ParentId = 1,
                            Title = "شارژر تبلت و موبایل"
                        },
                        new
                        {
                            Id = 29,
                            ParentId = 1,
                            Title = "کیف، کاور، لوازم جانبی تبلت"
                        },
                        new
                        {
                            Id = 30,
                            ParentId = 1,
                            Title = "باتری"
                        },
                        new
                        {
                            Id = 31,
                            ParentId = 1,
                            Title = "دوربین های تحت شبکه"
                        },
                        new
                        {
                            Id = 32,
                            ParentId = 1,
                            Title = "مودم و تجهیزات شبکه"
                        },
                        new
                        {
                            Id = 33,
                            ParentId = 1,
                            Title = "ماشین های اداری"
                        },
                        new
                        {
                            Id = 34,
                            ParentId = 2,
                            Title = "تلویزیون"
                        },
                        new
                        {
                            Id = 35,
                            ParentId = 2,
                            Title = "یخچال و فریزر"
                        },
                        new
                        {
                            Id = 36,
                            ParentId = 2,
                            Title = "دکوراتیو"
                        },
                        new
                        {
                            Id = 37,
                            ParentId = 2,
                            Title = "فرش ماشینی، دست بافت، تابلو"
                        },
                        new
                        {
                            Id = 38,
                            ParentId = 2,
                            Title = "لوازم برقی خانگی"
                        },
                        new
                        {
                            Id = 39,
                            ParentId = 2,
                            Title = "حیوانات خانگی، غذا و لوازم"
                        },
                        new
                        {
                            Id = 40,
                            ParentId = 2,
                            Title = "سرو و پذیرایی"
                        },
                        new
                        {
                            Id = 41,
                            ParentId = 2,
                            Title = "نور و روشنایی"
                        },
                        new
                        {
                            Id = 42,
                            ParentId = 2,
                            Title = "آشپزخانه"
                        },
                        new
                        {
                            Id = 43,
                            ParentId = 2,
                            Title = "مواد شوینده"
                        },
                        new
                        {
                            Id = 44,
                            ParentId = 2,
                            Title = "دستمال کاغذی"
                        },
                        new
                        {
                            Id = 45,
                            ParentId = 2,
                            Title = "ملحفه، سرویس، لوازم خواب"
                        },
                        new
                        {
                            Id = 46,
                            ParentId = 2,
                            Title = "حوله و وسایل حمام"
                        },
                        new
                        {
                            Id = 47,
                            ParentId = 2,
                            Title = "پادری، کمد، لوازم اتاق خواب"
                        },
                        new
                        {
                            Id = 48,
                            ParentId = 2,
                            Title = "لوازم دستشویی، روشویی"
                        },
                        new
                        {
                            Id = 49,
                            ParentId = 2,
                            Title = "فندک و لوازم جانبی"
                        },
                        new
                        {
                            Id = 50,
                            ParentId = 2,
                            Title = "گل، خاک، کود، لوازم باغبانی"
                        },
                        new
                        {
                            Id = 51,
                            ParentId = 2,
                            Title = "کولر گازی"
                        },
                        new
                        {
                            Id = 52,
                            ParentId = 2,
                            Title = "کولر آبی"
                        },
                        new
                        {
                            Id = 53,
                            ParentId = 3,
                            Title = "مردانه"
                        },
                        new
                        {
                            Id = 54,
                            ParentId = 3,
                            Title = "لباس مردانه"
                        },
                        new
                        {
                            Id = 55,
                            ParentId = 3,
                            Title = "اکسسوری مردانه"
                        },
                        new
                        {
                            Id = 56,
                            ParentId = 3,
                            Title = "زنانه"
                        },
                        new
                        {
                            Id = 57,
                            ParentId = 3,
                            Title = "لباس زنانه"
                        },
                        new
                        {
                            Id = 58,
                            ParentId = 3,
                            Title = "کفش زنانه"
                        },
                        new
                        {
                            Id = 59,
                            ParentId = 3,
                            Title = "اکسسوری زنانه"
                        },
                        new
                        {
                            Id = 60,
                            ParentId = 3,
                            Title = "طلا"
                        },
                        new
                        {
                            Id = 61,
                            ParentId = 3,
                            Title = "زیورآلات زنانه"
                        },
                        new
                        {
                            Id = 62,
                            ParentId = 3,
                            Title = "زیورآلات نقره زنانه"
                        },
                        new
                        {
                            Id = 63,
                            ParentId = 3,
                            Title = "عینک آفتابی زنانه"
                        },
                        new
                        {
                            Id = 64,
                            ParentId = 3,
                            Title = "عینک آفتابی مردانه"
                        },
                        new
                        {
                            Id = 65,
                            ParentId = 3,
                            Title = "پوشاک ورزشی مردانه"
                        },
                        new
                        {
                            Id = 66,
                            ParentId = 3,
                            Title = "پوشاک ورزشی زنانه"
                        },
                        new
                        {
                            Id = 67,
                            ParentId = 3,
                            Title = "کفش ورزشی مردانه"
                        },
                        new
                        {
                            Id = 68,
                            ParentId = 3,
                            Title = "کفش ورزشی زنانه"
                        },
                        new
                        {
                            Id = 69,
                            ParentId = 3,
                            Title = "پوشاک ورزشی پسرانه"
                        },
                        new
                        {
                            Id = 70,
                            ParentId = 3,
                            Title = "پوشاک ورزشی دخترانه"
                        },
                        new
                        {
                            Id = 71,
                            ParentId = 3,
                            Title = "کفش ورزشی پسرانه"
                        },
                        new
                        {
                            Id = 72,
                            ParentId = 3,
                            Title = "کفش ورزشی دخترانه"
                        },
                        new
                        {
                            Id = 73,
                            ParentId = 3,
                            Title = "کوله پشتی مردانه"
                        },
                        new
                        {
                            Id = 74,
                            ParentId = 3,
                            Title = "بچگانه"
                        },
                        new
                        {
                            Id = 75,
                            ParentId = 4,
                            Title = "کالاهای اساسی و خوار و بار"
                        },
                        new
                        {
                            Id = 76,
                            ParentId = 4,
                            Title = "صبحانه "
                        },
                        new
                        {
                            Id = 77,
                            ParentId = 4,
                            Title = "مواد پروتئینی"
                        },
                        new
                        {
                            Id = 78,
                            ParentId = 4,
                            Title = "لبنیات "
                        },
                        new
                        {
                            Id = 79,
                            ParentId = 4,
                            Title = "نوشیدنی ها"
                        },
                        new
                        {
                            Id = 80,
                            ParentId = 4,
                            Title = "میوه و سبزی"
                        },
                        new
                        {
                            Id = 81,
                            ParentId = 4,
                            Title = "غذای آماده و نودل"
                        },
                        new
                        {
                            Id = 82,
                            ParentId = 4,
                            Title = "فرآورده‌های منجمد"
                        },
                        new
                        {
                            Id = 83,
                            ParentId = 4,
                            Title = "تنقلات"
                        },
                        new
                        {
                            Id = 84,
                            ParentId = 4,
                            Title = "کنسرو و کمپوت"
                        },
                        new
                        {
                            Id = 85,
                            ParentId = 4,
                            Title = "خشکبار و شیرینی"
                        },
                        new
                        {
                            Id = 86,
                            ParentId = 5,
                            Title = "کتاب و مجله"
                        },
                        new
                        {
                            Id = 87,
                            ParentId = 5,
                            Title = "کتاب صوتی"
                        },
                        new
                        {
                            Id = 88,
                            ParentId = 5,
                            Title = "محتوای آموزشی"
                        },
                        new
                        {
                            Id = 89,
                            ParentId = 5,
                            Title = "نرم افزار"
                        },
                        new
                        {
                            Id = 90,
                            ParentId = 5,
                            Title = "بازی کنسول و کامپیوتر"
                        },
                        new
                        {
                            Id = 91,
                            ParentId = 5,
                            Title = "فیلم سینمایی، سریال و مستند"
                        },
                        new
                        {
                            Id = 92,
                            ParentId = 5,
                            Title = "آلبوم موسیقی"
                        },
                        new
                        {
                            Id = 93,
                            ParentId = 5,
                            Title = "لوازم تحریر "
                        },
                        new
                        {
                            Id = 94,
                            ParentId = 5,
                            Title = "آلات موسیقی"
                        },
                        new
                        {
                            Id = 95,
                            ParentId = 5,
                            Title = "فرش ماشینی، دستبافت، تابلو"
                        },
                        new
                        {
                            Id = 96,
                            ParentId = 4,
                            Title = "صنایع دستی"
                        },
                        new
                        {
                            Id = 97,
                            ParentId = 6,
                            Title = "بهداشت و حمام کودک و نوزاد"
                        },
                        new
                        {
                            Id = 98,
                            ParentId = 6,
                            Title = "پوشاک و کفش کودک و نوزاد "
                        },
                        new
                        {
                            Id = 99,
                            ParentId = 6,
                            Title = "تبلت"
                        },
                        new
                        {
                            Id = 100,
                            ParentId = 6,
                            Title = "پلی استیشن، ایکس باکس و بازی"
                        },
                        new
                        {
                            Id = 101,
                            ParentId = 6,
                            Title = "اسباب بازی"
                        },
                        new
                        {
                            Id = 102,
                            ParentId = 6,
                            Title = "بازی و سرگرمی کودک "
                        },
                        new
                        {
                            Id = 103,
                            ParentId = 6,
                            Title = "سلامت، ایمنی و مراقبت"
                        },
                        new
                        {
                            Id = 104,
                            ParentId = 6,
                            Title = "خواب کودک"
                        },
                        new
                        {
                            Id = 105,
                            ParentId = 6,
                            Title = "ملزومات گردش و سفر"
                        },
                        new
                        {
                            Id = 106,
                            ParentId = 6,
                            Title = "لوازم شخصی"
                        },
                        new
                        {
                            Id = 107,
                            ParentId = 6,
                            Title = "غذا خوری"
                        },
                        new
                        {
                            Id = 108,
                            ParentId = 7,
                            Title = "لوازم آرایشی"
                        },
                        new
                        {
                            Id = 109,
                            ParentId = 7,
                            Title = "مراقبت پوست"
                        },
                        new
                        {
                            Id = 110,
                            ParentId = 7,
                            Title = "مراقبت و زیبایی مو"
                        },
                        new
                        {
                            Id = 111,
                            ParentId = 7,
                            Title = "لوازم بهداشتی "
                        },
                        new
                        {
                            Id = 112,
                            ParentId = 7,
                            Title = "عطر و ادکلن"
                        },
                        new
                        {
                            Id = 113,
                            ParentId = 7,
                            Title = "لوازم شخصی برقی"
                        },
                        new
                        {
                            Id = 114,
                            ParentId = 7,
                            Title = "ابزار سلامت"
                        },
                        new
                        {
                            Id = 115,
                            ParentId = 8,
                            Title = "پوشاک ورزشی "
                        },
                        new
                        {
                            Id = 116,
                            ParentId = 8,
                            Title = "کفش ورزشی "
                        },
                        new
                        {
                            Id = 117,
                            ParentId = 8,
                            Title = "تجهیزات سفر"
                        },
                        new
                        {
                            Id = 118,
                            ParentId = 8,
                            Title = "دوچرخه"
                        },
                        new
                        {
                            Id = 119,
                            ParentId = 8,
                            Title = "کوهنوردی و کمپینگ"
                        },
                        new
                        {
                            Id = 120,
                            ParentId = 8,
                            Title = "چتر"
                        },
                        new
                        {
                            Id = 121,
                            ParentId = 8,
                            Title = "ساک ورزشی"
                        },
                        new
                        {
                            Id = 122,
                            ParentId = 8,
                            Title = "قمقمه و شیکر"
                        },
                        new
                        {
                            Id = 123,
                            ParentId = 8,
                            Title = "لوازم ورزشی"
                        },
                        new
                        {
                            Id = 124,
                            ParentId = 8,
                            Title = "اسکوتر برقی"
                        },
                        new
                        {
                            Id = 125,
                            ParentId = 8,
                            Title = "v"
                        },
                        new
                        {
                            Id = 126,
                            ParentId = 9,
                            Title = "ابزار برقی "
                        },
                        new
                        {
                            Id = 127,
                            ParentId = 9,
                            Title = "ابزار غیر برقی "
                        },
                        new
                        {
                            Id = 128,
                            ParentId = 9,
                            Title = "لوازم الکتریکی و یراق آلات"
                        },
                        new
                        {
                            Id = 129,
                            ParentId = 9,
                            Title = "لوازم باغبانی و کشاورزی"
                        },
                        new
                        {
                            Id = 130,
                            ParentId = 9,
                            Title = "تجهیزات ایمنی و کار "
                        },
                        new
                        {
                            Id = 131,
                            ParentId = 9,
                            Title = "حفاظتی و امنیتی"
                        },
                        new
                        {
                            Id = 132,
                            ParentId = 9,
                            Title = "دستگاه های حمل و بالابر صنعتی"
                        },
                        new
                        {
                            Id = 133,
                            ParentId = 10,
                            Title = "خودرو"
                        },
                        new
                        {
                            Id = 134,
                            ParentId = 10,
                            Title = "موتور سیکلت"
                        },
                        new
                        {
                            Id = 135,
                            ParentId = 10,
                            Title = "لوازم مصرفی خودرو "
                        },
                        new
                        {
                            Id = 136,
                            ParentId = 10,
                            Title = "لوازم یدکی خودرو"
                        },
                        new
                        {
                            Id = 137,
                            ParentId = 10,
                            Title = "لوازم صوتی و تصویری"
                        },
                        new
                        {
                            Id = 138,
                            ParentId = 10,
                            Title = "لوازم جانبی خودرو "
                        },
                        new
                        {
                            Id = 139,
                            ParentId = 10,
                            Title = "لوازم موتور سیکلت"
                        },
                        new
                        {
                            Id = 140,
                            ParentId = 11,
                            Title = "مواد غذایی ارگانیک"
                        },
                        new
                        {
                            Id = 141,
                            ParentId = 11,
                            Title = "خواروبار محلی"
                        },
                        new
                        {
                            Id = 142,
                            ParentId = 11,
                            Title = "صبحانه محلی"
                        },
                        new
                        {
                            Id = 143,
                            ParentId = 11,
                            Title = "کیک و شیرینی خانگی"
                        },
                        new
                        {
                            Id = 144,
                            ParentId = 11,
                            Title = "تنقلات خانگی"
                        },
                        new
                        {
                            Id = 145,
                            ParentId = 11,
                            Title = "لبنیات سنتی "
                        },
                        new
                        {
                            Id = 146,
                            ParentId = 11,
                            Title = "خشکبار و آجیل سنتی"
                        },
                        new
                        {
                            Id = 147,
                            ParentId = 11,
                            Title = "غلات و حبوبات ارگانیک"
                        },
                        new
                        {
                            Id = 148,
                            ParentId = 11,
                            Title = "ادویه و چاشنی ارگانیک"
                        },
                        new
                        {
                            Id = 149,
                            ParentId = 11,
                            Title = "عطاری"
                        },
                        new
                        {
                            Id = 150,
                            ParentId = 11,
                            Title = "ترشیجات و شور خانگی"
                        },
                        new
                        {
                            Id = 151,
                            ParentId = 11,
                            Title = "دکوراتیو سنتی"
                        },
                        new
                        {
                            Id = 152,
                            ParentId = 11,
                            Title = "خانه و کاشانه"
                        },
                        new
                        {
                            Id = 153,
                            ParentId = 11,
                            Title = "نوشیدنی‌های ارگانیک"
                        },
                        new
                        {
                            Id = 154,
                            ParentId = 11,
                            Title = "نوشیدنی‌های ارگانیک"
                        },
                        new
                        {
                            Id = 155,
                            ParentId = 11,
                            Title = "اکسسوری و زیورآلات دست ساز"
                        },
                        new
                        {
                            Id = 156,
                            ParentId = 11,
                            Title = "پوشاک بومی و محلی"
                        },
                        new
                        {
                            Id = 157,
                            ParentId = 11,
                            Title = "قالی و قالیچه"
                        },
                        new
                        {
                            Id = 158,
                            ParentId = 11,
                            Title = "ظروف سنتی"
                        },
                        new
                        {
                            Id = 159,
                            ParentId = 11,
                            Title = "لوازم آشپزخانه سنتی"
                        },
                        new
                        {
                            Id = 160,
                            ParentId = 11,
                            Title = "رومیزی، رانر و زیربشقابی سنتی"
                        });
                });

            modelBuilder.Entity("App.Domain.Core._Products.Entities.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("OrderItemId")
                        .HasColumnType("int");

                    b.Property<int?>("PictureId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(600)
                        .HasColumnType("nvarchar(600)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OrderItemId");

                    b.HasIndex("PictureId")
                        .IsUnique()
                        .HasFilter("[PictureId] IS NOT NULL");

                    b.HasIndex("ProductId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 11, 18, 15, 21, 31, 30, DateTimeKind.Local).AddTicks(9856),
                            CustomerId = 1,
                            IsConfirmed = true,
                            IsDeleted = false,
                            OrderItemId = 1,
                            ProductId = 1,
                            Text = "محصول فوق العاده ای بود. سپاس1"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 11, 18, 15, 21, 31, 30, DateTimeKind.Local).AddTicks(9862),
                            CustomerId = 2,
                            IsConfirmed = false,
                            IsDeleted = false,
                            OrderItemId = 3,
                            ProductId = 3,
                            Text = "2محصول فوق العاده ای بود. سپاس"
                        });
                });

            modelBuilder.Entity("App.Domain.Core._Products.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PayedAt")
                        .HasColumnType("datetime");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("TotalPrice")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 11, 18, 15, 21, 31, 31, DateTimeKind.Local).AddTicks(6055),
                            CustomerId = 1,
                            PayedAt = new DateTime(2023, 11, 18, 15, 51, 31, 31, DateTimeKind.Local).AddTicks(6060),
                            Status = true,
                            TotalPrice = 100
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 11, 18, 15, 21, 31, 31, DateTimeKind.Local).AddTicks(6067),
                            CustomerId = 1,
                            Status = false,
                            TotalPrice = 100
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2023, 11, 18, 15, 21, 31, 31, DateTimeKind.Local).AddTicks(6068),
                            CustomerId = 2,
                            PayedAt = new DateTime(2023, 11, 18, 16, 6, 31, 31, DateTimeKind.Local).AddTicks(6069),
                            Status = true,
                            TotalPrice = 100
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2023, 11, 18, 15, 21, 31, 31, DateTimeKind.Local).AddTicks(6071),
                            CustomerId = 2,
                            Status = false,
                            TotalPrice = 100
                        });
                });

            modelBuilder.Entity("App.Domain.Core._Products.Entities.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BoothProductid")
                        .HasColumnType("int");

                    b.Property<int>("Count")
                        .HasColumnType("int")
                        .HasColumnName("count");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BoothProductid");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BoothProductid = 1,
                            Count = 1,
                            IsActive = true,
                            OrderId = 1
                        },
                        new
                        {
                            Id = 2,
                            BoothProductid = 3,
                            Count = 1,
                            IsActive = true,
                            OrderId = 2
                        },
                        new
                        {
                            Id = 3,
                            BoothProductid = 4,
                            Count = 1,
                            IsActive = true,
                            OrderId = 3
                        },
                        new
                        {
                            Id = 4,
                            BoothProductid = 6,
                            Count = 1,
                            IsActive = true,
                            OrderId = 4
                        });
                });

            modelBuilder.Entity("App.Domain.Core._Products.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BasePrice")
                        .HasColumnType("int");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Grantee")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("IncludedComponents")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InformationDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BasePrice = 100000,
                            Brand = "زاگرس پوش",
                            CategoryId = 52,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = 0,
                            Description = "محصول عالی",
                            Grantee = "زمانت تعویض هفت روزه",
                            IncludedComponents = "",
                            InformationDetails = "جنس نخ پنبه ای",
                            IsConfirmed = true,
                            IsDeleted = false,
                            Name = "پیراهن سرمه ای نخی"
                        },
                        new
                        {
                            Id = 2,
                            BasePrice = 1800000,
                            Brand = "ال سی من",
                            CategoryId = 67,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = 0,
                            Description = "محصول عالی",
                            Grantee = "زمانت تعویض هفت روزه",
                            IncludedComponents = "",
                            InformationDetails = "سایز ها ایکس و ایکس لارج",
                            IsConfirmed = true,
                            IsDeleted = false,
                            Name = "هودی آبی"
                        },
                        new
                        {
                            Id = 3,
                            BasePrice = 100000,
                            Brand = "اسکیچر",
                            CategoryId = 66,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = 0,
                            Description = "محصول عالی",
                            Grantee = "زمانت تعویض هفت روزه",
                            IncludedComponents = "",
                            InformationDetails = "جنس زیره پی یو",
                            IsConfirmed = false,
                            IsDeleted = false,
                            Name = "کفش پیاده روی"
                        },
                        new
                        {
                            Id = 4,
                            BasePrice = 100000,
                            Brand = "کرال",
                            CategoryId = 53,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = 0,
                            Description = "محصول عالی",
                            Grantee = "زمانت تعویض هفت روزه",
                            IncludedComponents = "",
                            InformationDetails = "نمد ضد آب",
                            IsConfirmed = true,
                            IsDeleted = false,
                            Name = "کلاه نمدی قهوه ای"
                        },
                        new
                        {
                            Id = 5,
                            BasePrice = 100000,
                            Brand = "تسکو",
                            CategoryId = 19,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = 0,
                            Description = "محصول عالی",
                            Grantee = "زمانت تعویض هفت روزه",
                            IncludedComponents = "",
                            InformationDetails = "مخصوص بازی",
                            IsConfirmed = false,
                            IsDeleted = false,
                            Name = "هدفوت بلوتوث "
                        },
                        new
                        {
                            Id = 6,
                            BasePrice = 100000,
                            Brand = "آیفون",
                            CategoryId = 17,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = 0,
                            Description = "محصول عالی",
                            Grantee = "زمانت تعویض هفت روزه",
                            IncludedComponents = "",
                            InformationDetails = "باتری 800 میلی آمپر",
                            IsConfirmed = true,
                            IsDeleted = false,
                            Name = "ساعت هوشمند"
                        },
                        new
                        {
                            Id = 7,
                            BasePrice = 100000,
                            Brand = "سامسونگ",
                            CategoryId = 19,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = 0,
                            Description = "محصول عالی",
                            Grantee = "زمانت تعویض هفت روزه",
                            IncludedComponents = "",
                            InformationDetails = "ضد آب",
                            IsConfirmed = false,
                            IsDeleted = false,
                            Name = "ایر پاد سامسونگ"
                        },
                        new
                        {
                            Id = 8,
                            BasePrice = 100000,
                            Brand = "سونی",
                            CategoryId = 22,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = 0,
                            Description = "محصول عالی",
                            Grantee = "زمانت تعویض هفت روزه",
                            IncludedComponents = "",
                            InformationDetails = "سنسور 21 مگاپیکسل",
                            IsConfirmed = true,
                            IsDeleted = false,
                            Name = "دوربین کامپکت"
                        },
                        new
                        {
                            Id = 9,
                            BasePrice = 32000000,
                            Brand = "آیفون",
                            CategoryId = 11,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = 0,
                            Description = "محصول عالی",
                            Grantee = "زمانت تعویض هفت روزه",
                            IncludedComponents = "",
                            InformationDetails = "ضد آب",
                            IsConfirmed = true,
                            IsDeleted = false,
                            Name = "گوشی آیفون 12"
                        },
                        new
                        {
                            Id = 10,
                            BasePrice = 28000000,
                            Brand = "اچ پی",
                            CategoryId = 13,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = 0,
                            Description = "محصول عالی",
                            Grantee = "زمانت تعویض هفت روزه",
                            IncludedComponents = "",
                            InformationDetails = " پردازنده نسل 13",
                            IsConfirmed = true,
                            IsDeleted = false,
                            Name = "لبتاب hp"
                        });
                });

            modelBuilder.Entity("App.Domain.Core._Products.Entities.ProductAttributeValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AttributeId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.HasIndex("AttributeId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductAttributeValues");
                });

            modelBuilder.Entity("App.Domain.Core._User.Entities.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FullAddress")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.Property<int?>("ProvinceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProvinceId");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "پردیس",
                            FullAddress = "خیابان 29",
                            PostalCode = "2185217412",
                            ProvinceId = 1
                        },
                        new
                        {
                            Id = 2,
                            City = "شهریار",
                            FullAddress = "خیابان 92،کوچه اول",
                            PostalCode = "8745123951",
                            ProvinceId = 1
                        },
                        new
                        {
                            Id = 3,
                            City = "اراک",
                            FullAddress = "خیابان شهید شیرودی ،نبش دبستان دین ودانش",
                            PostalCode = "3851775124",
                            ProvinceId = 28
                        },
                        new
                        {
                            Id = 4,
                            City = "اراک",
                            FullAddress = "خیابان شهید شیرودی ،نبش دبستان ",
                            PostalCode = "3851775124",
                            ProvinceId = 28
                        });
                });

            modelBuilder.Entity("App.Domain.Core._User.Entities.Admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AppUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Birthdate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ProfilePicId")
                        .HasColumnType("int");

                    b.Property<string>("ShabaNumber")
                        .HasMaxLength(25)
                        .HasColumnType("nchar(25)")
                        .IsFixedLength();

                    b.Property<int?>("Wallet")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId")
                        .IsUnique();

                    b.HasIndex("ProfilePicId")
                        .IsUnique()
                        .HasFilter("[ProfilePicId] IS NOT NULL");

                    b.ToTable("Admins");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppUserId = 1,
                            Birthdate = new DateTime(1990, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "حسین",
                            LastName = "بشارتی",
                            ProfilePicId = 12,
                            ShabaNumber = "Ir89752140000007800125",
                            Wallet = 800000
                        });
                });

            modelBuilder.Entity("App.Domain.Core._User.Entities.AppRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PermissionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin",
                            NormalizedName = "ADMIN",
                            PermissionName = "SuperAdmin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Seller",
                            NormalizedName = "SELLER",
                            PermissionName = "DefaultSeller"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Customer",
                            NormalizedName = "CUSTOMER",
                            PermissionName = "DefaultCustomer"
                        });
                });

            modelBuilder.Entity("App.Domain.Core._User.Entities.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8fdda84f-918b-446f-a85e-678675236be4",
                            CreatedAt = new DateTime(2023, 11, 18, 15, 21, 30, 485, DateTimeKind.Local).AddTicks(3053),
                            DeletedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Admin@mail.com",
                            EmailConfirmed = true,
                            IsActive = true,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ADMIN@MAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEB2/z4zTYUkCloIFcz0RygqosLSngH0DVYY9aeg3WK4DofXF6cY2fEM+gzUAt/qb9A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "21430390-990a-453a-bdad-124f794c0dae",
                            TwoFactorEnabled = false,
                            UserName = "Admin@mail.com"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cfc86c22-8c68-4116-80d1-8bc966811a18",
                            CreatedAt = new DateTime(2023, 11, 18, 15, 21, 30, 485, DateTimeKind.Local).AddTicks(3095),
                            DeletedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Seller1@mail.com",
                            EmailConfirmed = true,
                            IsActive = true,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "SELLER1@MAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEADNRLXP0yUea/HPHMhdYIfZ7OqNTKNsIvXDJvYsGcFrKxOrgff16JcL/mBeGZv3vg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5cea09dc-b085-43dd-862f-30ccdc8d8e60",
                            TwoFactorEnabled = false,
                            UserName = "Seller1@mail.com"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f2aa21e6-b28e-4994-adba-af21148b5209",
                            CreatedAt = new DateTime(2023, 11, 18, 15, 21, 30, 485, DateTimeKind.Local).AddTicks(3114),
                            DeletedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Seller2@mail.com",
                            EmailConfirmed = true,
                            IsActive = true,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "SELLER2@MAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAENYvxvEDOe/20TIoB9FMMl1yYTLgyIg0OrjOSpArBMe+4hIiCx+OCnfZiWgMr6h21w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "093d190e-34af-4917-ae50-0a31e8e0a3dd",
                            TwoFactorEnabled = false,
                            UserName = "Seller2@mail.com"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "46c8ba00-8931-4a72-ba36-c9a9e3c001c4",
                            CreatedAt = new DateTime(2023, 11, 18, 15, 21, 30, 485, DateTimeKind.Local).AddTicks(3125),
                            DeletedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "customer1@mail.com",
                            EmailConfirmed = true,
                            IsActive = true,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "CUSTOMER1@MAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPVPT8HnLFD2ZuLlC3tNIpEaJKDLCPDlrXAWOhzNklonYrrXJ/hQDT3qOtfkZy6FoA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "27c58977-498a-4636-b68c-eef869446b0f",
                            TwoFactorEnabled = false,
                            UserName = "customer1@mail.com"
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4044c168-5dd9-48f5-97fa-014acb2233b2",
                            CreatedAt = new DateTime(2023, 11, 18, 15, 21, 30, 485, DateTimeKind.Local).AddTicks(3136),
                            DeletedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "customer2@mail.com",
                            EmailConfirmed = true,
                            IsActive = true,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "CUSTOMER2@MAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAENmyAdcWpCDubGIHqGdU1uBrF/46UpYE1ImcDP9FIVBXSeCXnl4FfUdqh2UK78DlAg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c590fb1e-6e8c-415a-a218-9ea901d429e8",
                            TwoFactorEnabled = false,
                            UserName = "customer2@mail.com"
                        });
                });

            modelBuilder.Entity("App.Domain.Core._User.Entities.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AddressId")
                        .HasColumnType("int");

                    b.Property<int>("AppUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Birthdate")
                        .HasColumnType("datetime");

                    b.Property<int>("CartOrderId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ProfilePicId")
                        .HasColumnType("int");

                    b.Property<bool?>("Sexuality")
                        .HasColumnType("bit");

                    b.Property<int?>("Wallet")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique()
                        .HasFilter("[AddressId] IS NOT NULL");

                    b.HasIndex("AppUserId")
                        .IsUnique();

                    b.HasIndex("ProfilePicId")
                        .IsUnique()
                        .HasFilter("[ProfilePicId] IS NOT NULL");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddressId = 3,
                            AppUserId = 4,
                            Birthdate = new DateTime(1990, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CartOrderId = 2,
                            FirstName = "جواد  ",
                            LastName = "بیات",
                            ProfilePicId = 15
                        },
                        new
                        {
                            Id = 2,
                            AddressId = 4,
                            AppUserId = 5,
                            Birthdate = new DateTime(1990, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CartOrderId = 4,
                            FirstName = "محمد",
                            LastName = "پارسایی",
                            ProfilePicId = 28
                        });
                });

            modelBuilder.Entity("App.Domain.Core._User.Entities.Province", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 32L);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Provinces");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "آذربایجان شرقی"
                        },
                        new
                        {
                            Id = 2,
                            Name = "آذربایجان غربی"
                        },
                        new
                        {
                            Id = 3,
                            Name = "اردبیل"
                        },
                        new
                        {
                            Id = 4,
                            Name = "اصفهان"
                        },
                        new
                        {
                            Id = 5,
                            Name = "البرز"
                        },
                        new
                        {
                            Id = 6,
                            Name = "ایلام"
                        },
                        new
                        {
                            Id = 7,
                            Name = "بوشهر"
                        },
                        new
                        {
                            Id = 8,
                            Name = "تهران"
                        },
                        new
                        {
                            Id = 9,
                            Name = "چهارمحال و بختیاری"
                        },
                        new
                        {
                            Id = 10,
                            Name = "خراسان جنوبی"
                        },
                        new
                        {
                            Id = 11,
                            Name = "خراسان رضوی"
                        },
                        new
                        {
                            Id = 12,
                            Name = "خراسان شمالی"
                        },
                        new
                        {
                            Id = 13,
                            Name = "خوزستان"
                        },
                        new
                        {
                            Id = 14,
                            Name = "زنجان"
                        },
                        new
                        {
                            Id = 15,
                            Name = "سمنان"
                        },
                        new
                        {
                            Id = 16,
                            Name = "سیستان و بلوچستان"
                        },
                        new
                        {
                            Id = 17,
                            Name = "فارس"
                        },
                        new
                        {
                            Id = 18,
                            Name = "قزوین"
                        },
                        new
                        {
                            Id = 19,
                            Name = "قم"
                        },
                        new
                        {
                            Id = 20,
                            Name = "کردستان"
                        },
                        new
                        {
                            Id = 21,
                            Name = "کرمان"
                        },
                        new
                        {
                            Id = 22,
                            Name = "کرمانشاه"
                        },
                        new
                        {
                            Id = 23,
                            Name = "کهگیلویه و بویراحمد"
                        },
                        new
                        {
                            Id = 24,
                            Name = "گلستان"
                        },
                        new
                        {
                            Id = 25,
                            Name = "گیلان"
                        },
                        new
                        {
                            Id = 26,
                            Name = "لرستان"
                        },
                        new
                        {
                            Id = 27,
                            Name = "مازندران"
                        },
                        new
                        {
                            Id = 28,
                            Name = "مرکزی"
                        },
                        new
                        {
                            Id = 29,
                            Name = "هرمزگان"
                        },
                        new
                        {
                            Id = 30,
                            Name = "همدان"
                        },
                        new
                        {
                            Id = 31,
                            Name = "یزد"
                        });
                });

            modelBuilder.Entity("App.Domain.Core._User.Entities.Seller", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AddressId")
                        .HasColumnType("int");

                    b.Property<int>("AppUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Birthdate")
                        .HasColumnType("datetime");

                    b.Property<int?>("BoothId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ProfilePicId")
                        .HasColumnType("int");

                    b.Property<string>("ShabaNumber")
                        .HasMaxLength(25)
                        .HasColumnType("nchar(25)")
                        .IsFixedLength();

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique()
                        .HasFilter("[AddressId] IS NOT NULL");

                    b.HasIndex("AppUserId")
                        .IsUnique();

                    b.HasIndex("BoothId")
                        .IsUnique()
                        .HasFilter("[BoothId] IS NOT NULL");

                    b.HasIndex("ProfilePicId")
                        .IsUnique()
                        .HasFilter("[ProfilePicId] IS NOT NULL");

                    b.ToTable("Sellers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddressId = 1,
                            AppUserId = 2,
                            Birthdate = new DateTime(1990, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "حامد",
                            LastName = "کریمی",
                            ProfilePicId = 13,
                            ShabaNumber = "Ir89752140000007800125"
                        },
                        new
                        {
                            Id = 2,
                            AddressId = 2,
                            AppUserId = 3,
                            Birthdate = new DateTime(1990, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "میلاد",
                            LastName = "بداقی",
                            ProfilePicId = 14,
                            ShabaNumber = "Ir89752140000007800125"
                        });
                });

            modelBuilder.Entity("App.Domain.Core._User.Entities.Wage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FeePercenteage")
                        .HasColumnType("int");

                    b.Property<int>("OrderitemId")
                        .HasColumnType("int");

                    b.Property<int>("WageAmount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderitemId")
                        .IsUnique();

                    b.ToTable("Wages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FeePercenteage = 25,
                            OrderitemId = 1,
                            WageAmount = 80000
                        });
                });

            modelBuilder.Entity("AttributesCategory", b =>
                {
                    b.Property<int>("AttributesId")
                        .HasColumnType("int");

                    b.Property<int>("CategoriesId")
                        .HasColumnType("int");

                    b.HasKey("AttributesId", "CategoriesId");

                    b.HasIndex("CategoriesId");

                    b.ToTable("AttributesCategory");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 4,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 5,
                            RoleId = 3
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PictureProduct", b =>
                {
                    b.Property<int>("PicturesId")
                        .HasColumnType("int");

                    b.Property<int>("ProductsId")
                        .HasColumnType("int");

                    b.HasKey("PicturesId", "ProductsId");

                    b.HasIndex("ProductsId");

                    b.ToTable("PictureProduct");
                });

            modelBuilder.Entity("App.Domain.Core._Booth.Entities.Booth", b =>
                {
                    b.HasOne("App.Domain.Core._Common.Entities.Picture", "AvatarPicture")
                        .WithOne("Booths")
                        .HasForeignKey("App.Domain.Core._Booth.Entities.Booth", "AvatarPictureId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Booths_Pictures");

                    b.HasOne("App.Domain.Core._Booth.Entities.Medal", "Medal")
                        .WithMany("Booths")
                        .HasForeignKey("MedalId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Booths_Medals");

                    b.Navigation("AvatarPicture");

                    b.Navigation("Medal");
                });

            modelBuilder.Entity("App.Domain.Core._Products.Entities.Auction", b =>
                {
                    b.HasOne("App.Domain.Core._Booth.Entities.Booth", "Booth")
                        .WithMany("Auctions")
                        .HasForeignKey("BoothId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Auctions_Booths");

                    b.HasOne("App.Domain.Core._User.Entities.Customer", null)
                        .WithMany("Auctions")
                        .HasForeignKey("CustomerId");

                    b.HasOne("App.Domain.Core._Products.Entities.Product", "Product")
                        .WithMany("Auctions")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Auctions_Products");

                    b.Navigation("Booth");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("App.Domain.Core._Products.Entities.Bid", b =>
                {
                    b.HasOne("App.Domain.Core._Products.Entities.Auction", "Auction")
                        .WithMany("Bids")
                        .HasForeignKey("AuctionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Bids_Actions");

                    b.HasOne("App.Domain.Core._User.Entities.Customer", "Customer")
                        .WithMany("Bids")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Bids_Customers");

                    b.Navigation("Auction");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("App.Domain.Core._Products.Entities.BoothProduct", b =>
                {
                    b.HasOne("App.Domain.Core._Booth.Entities.Booth", "Booth")
                        .WithMany("BoothProducts")
                        .HasForeignKey("BoothId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_BoothProduct_Booths");

                    b.HasOne("App.Domain.Core._Products.Entities.Product", "Product")
                        .WithMany("BoothProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_BoothProduct_Products");

                    b.Navigation("Booth");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("App.Domain.Core._Products.Entities.Category", b =>
                {
                    b.HasOne("App.Domain.Core._Products.Entities.Category", "Parent")
                        .WithMany("Subcategories")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("FK_Categories_Categories");

                    b.HasOne("App.Domain.Core._Common.Entities.Picture", "Picture")
                        .WithOne("Categories")
                        .HasForeignKey("App.Domain.Core._Products.Entities.Category", "PictureId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Categories_Pictures");

                    b.Navigation("Parent");

                    b.Navigation("Picture");
                });

            modelBuilder.Entity("App.Domain.Core._Products.Entities.Comment", b =>
                {
                    b.HasOne("App.Domain.Core._User.Entities.Customer", "Customer")
                        .WithMany("Comments")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Comments_Customers");

                    b.HasOne("App.Domain.Core._Products.Entities.OrderItem", "OrderItem")
                        .WithMany("Comments")
                        .HasForeignKey("OrderItemId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Comments_OrderItems");

                    b.HasOne("App.Domain.Core._Common.Entities.Picture", "Picture")
                        .WithOne("Comment")
                        .HasForeignKey("App.Domain.Core._Products.Entities.Comment", "PictureId");

                    b.HasOne("App.Domain.Core._Products.Entities.Product", "Product")
                        .WithMany("Comments")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_Comments_Product");

                    b.Navigation("Customer");

                    b.Navigation("OrderItem");

                    b.Navigation("Picture");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("App.Domain.Core._Products.Entities.Order", b =>
                {
                    b.HasOne("App.Domain.Core._User.Entities.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Orders_Customers");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("App.Domain.Core._Products.Entities.OrderItem", b =>
                {
                    b.HasOne("App.Domain.Core._Products.Entities.BoothProduct", "BoothProduct")
                        .WithMany("OrderItems")
                        .HasForeignKey("BoothProductid")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_OrderItems_BoothProduct");

                    b.HasOne("App.Domain.Core._Products.Entities.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_OrderItems_Orders");

                    b.Navigation("BoothProduct");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("App.Domain.Core._Products.Entities.Product", b =>
                {
                    b.HasOne("App.Domain.Core._Products.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Products_Categories");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("App.Domain.Core._Products.Entities.ProductAttributeValue", b =>
                {
                    b.HasOne("App.Domain.Core._Products.Entities.Attributes", "Attribute")
                        .WithMany("ProductAttributeValues")
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_ProductAttributeValue_Attribute");

                    b.HasOne("App.Domain.Core._Products.Entities.Product", "Product")
                        .WithMany("ProductAttributeValues")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ProductAttributeValue_Products");

                    b.Navigation("Attribute");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("App.Domain.Core._User.Entities.Address", b =>
                {
                    b.HasOne("App.Domain.Core._User.Entities.Province", "Province")
                        .WithMany("Addresses")
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Addresses_Provinces");

                    b.Navigation("Province");
                });

            modelBuilder.Entity("App.Domain.Core._User.Entities.Admin", b =>
                {
                    b.HasOne("App.Domain.Core._User.Entities.AppUser", "AppUser")
                        .WithOne("Admin")
                        .HasForeignKey("App.Domain.Core._User.Entities.Admin", "AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Domain.Core._Common.Entities.Picture", "ProfilePic")
                        .WithOne("Admins")
                        .HasForeignKey("App.Domain.Core._User.Entities.Admin", "ProfilePicId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Admins_Pictures");

                    b.Navigation("AppUser");

                    b.Navigation("ProfilePic");
                });

            modelBuilder.Entity("App.Domain.Core._User.Entities.Customer", b =>
                {
                    b.HasOne("App.Domain.Core._User.Entities.Address", "Address")
                        .WithOne("Customers")
                        .HasForeignKey("App.Domain.Core._User.Entities.Customer", "AddressId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Customers_Addresses");

                    b.HasOne("App.Domain.Core._User.Entities.AppUser", "AppUser")
                        .WithOne("Customer")
                        .HasForeignKey("App.Domain.Core._User.Entities.Customer", "AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Domain.Core._Common.Entities.Picture", "ProfilePic")
                        .WithOne("Customers")
                        .HasForeignKey("App.Domain.Core._User.Entities.Customer", "ProfilePicId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Customers_Pictures");

                    b.Navigation("Address");

                    b.Navigation("AppUser");

                    b.Navigation("ProfilePic");
                });

            modelBuilder.Entity("App.Domain.Core._User.Entities.Seller", b =>
                {
                    b.HasOne("App.Domain.Core._User.Entities.Address", "Address")
                        .WithOne("Sellers")
                        .HasForeignKey("App.Domain.Core._User.Entities.Seller", "AddressId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Sellers_Addresses");

                    b.HasOne("App.Domain.Core._User.Entities.AppUser", "AppUser")
                        .WithOne("Seller")
                        .HasForeignKey("App.Domain.Core._User.Entities.Seller", "AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Domain.Core._Booth.Entities.Booth", "Booth")
                        .WithOne("Sellers")
                        .HasForeignKey("App.Domain.Core._User.Entities.Seller", "BoothId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_Sellers_Booths");

                    b.HasOne("App.Domain.Core._Common.Entities.Picture", "ProfilePic")
                        .WithOne("Sellers")
                        .HasForeignKey("App.Domain.Core._User.Entities.Seller", "ProfilePicId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Sellers_Pictures");

                    b.Navigation("Address");

                    b.Navigation("AppUser");

                    b.Navigation("Booth");

                    b.Navigation("ProfilePic");
                });

            modelBuilder.Entity("App.Domain.Core._User.Entities.Wage", b =>
                {
                    b.HasOne("App.Domain.Core._Products.Entities.OrderItem", "Orderitem")
                        .WithOne("Wages")
                        .HasForeignKey("App.Domain.Core._User.Entities.Wage", "OrderitemId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Wages_OrderItems");

                    b.Navigation("Orderitem");
                });

            modelBuilder.Entity("AttributesCategory", b =>
                {
                    b.HasOne("App.Domain.Core._Products.Entities.Attributes", null)
                        .WithMany()
                        .HasForeignKey("AttributesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Domain.Core._Products.Entities.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("App.Domain.Core._User.Entities.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("App.Domain.Core._User.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("App.Domain.Core._User.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("App.Domain.Core._User.Entities.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Domain.Core._User.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("App.Domain.Core._User.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PictureProduct", b =>
                {
                    b.HasOne("App.Domain.Core._Common.Entities.Picture", null)
                        .WithMany()
                        .HasForeignKey("PicturesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Domain.Core._Products.Entities.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("App.Domain.Core._Booth.Entities.Booth", b =>
                {
                    b.Navigation("Auctions");

                    b.Navigation("BoothProducts");

                    b.Navigation("Sellers");
                });

            modelBuilder.Entity("App.Domain.Core._Booth.Entities.Medal", b =>
                {
                    b.Navigation("Booths");
                });

            modelBuilder.Entity("App.Domain.Core._Common.Entities.Picture", b =>
                {
                    b.Navigation("Admins");

                    b.Navigation("Booths");

                    b.Navigation("Categories");

                    b.Navigation("Comment");

                    b.Navigation("Customers");

                    b.Navigation("Sellers");
                });

            modelBuilder.Entity("App.Domain.Core._Products.Entities.Attributes", b =>
                {
                    b.Navigation("ProductAttributeValues");
                });

            modelBuilder.Entity("App.Domain.Core._Products.Entities.Auction", b =>
                {
                    b.Navigation("Bids");
                });

            modelBuilder.Entity("App.Domain.Core._Products.Entities.BoothProduct", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("App.Domain.Core._Products.Entities.Category", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("Subcategories");
                });

            modelBuilder.Entity("App.Domain.Core._Products.Entities.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("App.Domain.Core._Products.Entities.OrderItem", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Wages")
                        .IsRequired();
                });

            modelBuilder.Entity("App.Domain.Core._Products.Entities.Product", b =>
                {
                    b.Navigation("Auctions");

                    b.Navigation("BoothProducts");

                    b.Navigation("Comments");

                    b.Navigation("ProductAttributeValues");
                });

            modelBuilder.Entity("App.Domain.Core._User.Entities.Address", b =>
                {
                    b.Navigation("Customers")
                        .IsRequired();

                    b.Navigation("Sellers")
                        .IsRequired();
                });

            modelBuilder.Entity("App.Domain.Core._User.Entities.AppUser", b =>
                {
                    b.Navigation("Admin");

                    b.Navigation("Customer");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("App.Domain.Core._User.Entities.Customer", b =>
                {
                    b.Navigation("Auctions");

                    b.Navigation("Bids");

                    b.Navigation("Comments");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("App.Domain.Core._User.Entities.Province", b =>
                {
                    b.Navigation("Addresses");
                });
#pragma warning restore 612, 618
        }
    }
}
