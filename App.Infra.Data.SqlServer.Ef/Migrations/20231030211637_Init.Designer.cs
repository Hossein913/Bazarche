// <auto-generated />
using System;
using App.Infra.Data.SqlServer.Ef.DbCntx;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace App.Infra.Data.SqlServer.Ef.Migrations
{
    [DbContext(typeof(BazarcheContext))]
    [Migration("20231030211637_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("App.Domain.Core.Booths.Entities.Booth", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountBalance")
                        .HasColumnType("int");

                    b.Property<int>("AvatarPictureId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("MedalId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("AvatarPictureId");

                    b.HasIndex("MedalId");

                    b.ToTable("Booths");
                });

            modelBuilder.Entity("App.Domain.Core.Booths.Entities.Medal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FeePercentage")
                        .HasColumnType("int");

                    b.Property<int>("MinSalesRequired")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Medals");
                });

            modelBuilder.Entity("App.Domain.Core.Common.Entities.Picture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Pictures");
                });

            modelBuilder.Entity("App.Domain.Core.Products.Entities.Bid", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ActionId")
                        .HasColumnType("int");

                    b.Property<int>("BidPrice")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<bool>("IsCancelled")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ActionId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Bids");
                });

            modelBuilder.Entity("App.Domain.Core.Products.Entities.BoothProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BoothId")
                        .HasColumnType("int");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("BoothId");

                    b.HasIndex("ProductId");

                    b.ToTable("BoothProduct", (string)null);
                });

            modelBuilder.Entity("App.Domain.Core.Products.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<int>("PictureId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("PictureId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("App.Domain.Core.Products.Entities.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("OrderItemId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(600)
                        .HasColumnType("nvarchar(600)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OrderItemId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("App.Domain.Core.Products.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PayedAt")
                        .HasColumnType("datetime");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("TotalPrice")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("App.Domain.Core.Products.Entities.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BoothProductid")
                        .HasColumnType("int");

                    b.Property<int>("Count")
                        .HasColumnType("int")
                        .HasColumnName("count");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BoothProductid");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("App.Domain.Core.Products.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BasePrise")
                        .HasColumnType("int");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Describtion")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Grantee")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("IncludedComponentes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InformationDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("App.Domain.Core.Products.Entities.ProductAction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BasePrice")
                        .HasColumnType("int");

                    b.Property<int>("BoothId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("WinnerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BoothId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductActions");
                });

            modelBuilder.Entity("App.Domain.Core.User.Entities.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FullAddress")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("App.Domain.Core.User.Entities.Admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Birthdate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Firestname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Homenumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nchar(11)")
                        .IsFixedLength();

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Phonenumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nchar(11)")
                        .IsFixedLength();

                    b.Property<int>("ProfilePictureId")
                        .HasColumnType("int");

                    b.Property<string>("ShabaNumber")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nchar(25)")
                        .IsFixedLength();

                    b.Property<int>("Wallet")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProfilePictureId");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("App.Domain.Core.User.Entities.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Birthdate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Firestname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Homenumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nchar(11)")
                        .IsFixedLength();

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Phonenumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nchar(11)")
                        .IsFixedLength();

                    b.Property<int>("ProfilePictureId")
                        .HasColumnType("int");

                    b.Property<bool>("Sexuality")
                        .HasColumnType("bit");

                    b.Property<int>("Wallet")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("ProfilePictureId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("App.Domain.Core.User.Entities.Seller", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Birthdate")
                        .HasColumnType("datetime");

                    b.Property<int>("BoothId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Firestname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Homenumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nchar(11)")
                        .IsFixedLength();

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("LicenseNumber")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Phonenumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nchar(11)")
                        .IsFixedLength();

                    b.Property<int>("ProfilePictureId")
                        .HasColumnType("int");

                    b.Property<bool>("Sexuality")
                        .HasColumnType("bit");

                    b.Property<string>("ShabaNumber")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nchar(25)")
                        .IsFixedLength();

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("BoothId");

                    b.HasIndex("ProfilePictureId");

                    b.ToTable("Sellers");
                });

            modelBuilder.Entity("PictureProduct", b =>
                {
                    b.Property<int>("PicturesId")
                        .HasColumnType("int");

                    b.Property<int>("ProductsId")
                        .HasColumnType("int");

                    b.HasKey("PicturesId", "ProductsId");

                    b.HasIndex("ProductsId");

                    b.ToTable("PictureProduct");
                });

            modelBuilder.Entity("App.Domain.Core.Booths.Entities.Booth", b =>
                {
                    b.HasOne("App.Domain.Core.Common.Entities.Picture", "AvatarPicture")
                        .WithMany("Booths")
                        .HasForeignKey("AvatarPictureId")
                        .IsRequired()
                        .HasConstraintName("FK_Booths_Pictures");

                    b.HasOne("App.Domain.Core.Booths.Entities.Medal", "Medal")
                        .WithMany("Booths")
                        .HasForeignKey("MedalId")
                        .IsRequired()
                        .HasConstraintName("FK_Booths_Medals");

                    b.Navigation("AvatarPicture");

                    b.Navigation("Medal");
                });

            modelBuilder.Entity("App.Domain.Core.Products.Entities.Bid", b =>
                {
                    b.HasOne("App.Domain.Core.Products.Entities.ProductAction", "Action")
                        .WithMany("Bids")
                        .HasForeignKey("ActionId")
                        .IsRequired()
                        .HasConstraintName("FK_Bids_Actions");

                    b.HasOne("App.Domain.Core.User.Entities.Customer", "Customer")
                        .WithMany("Bids")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK_Bids_Customers");

                    b.Navigation("Action");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("App.Domain.Core.Products.Entities.BoothProduct", b =>
                {
                    b.HasOne("App.Domain.Core.Booths.Entities.Booth", "Booth")
                        .WithMany("BoothProducts")
                        .HasForeignKey("BoothId")
                        .IsRequired()
                        .HasConstraintName("FK_BoothProduct_Booths");

                    b.HasOne("App.Domain.Core.Products.Entities.Product", "Product")
                        .WithMany("BoothProducts")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_BoothProduct_Products");

                    b.Navigation("Booth");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("App.Domain.Core.Products.Entities.Category", b =>
                {
                    b.HasOne("App.Domain.Core.Products.Entities.Category", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("FK_Categories_Categories");

                    b.HasOne("App.Domain.Core.Common.Entities.Picture", "Picture")
                        .WithMany("Categories")
                        .HasForeignKey("PictureId")
                        .IsRequired()
                        .HasConstraintName("FK_Categories_Pictures");

                    b.Navigation("Parent");

                    b.Navigation("Picture");
                });

            modelBuilder.Entity("App.Domain.Core.Products.Entities.Comment", b =>
                {
                    b.HasOne("App.Domain.Core.User.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK_Comments_Customers");

                    b.HasOne("App.Domain.Core.Products.Entities.OrderItem", "OrderItem")
                        .WithMany()
                        .HasForeignKey("OrderItemId")
                        .IsRequired()
                        .HasConstraintName("FK_Comments_OrderItems");

                    b.Navigation("Customer");

                    b.Navigation("OrderItem");
                });

            modelBuilder.Entity("App.Domain.Core.Products.Entities.Order", b =>
                {
                    b.HasOne("App.Domain.Core.User.Entities.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK_Orders_Customers");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("App.Domain.Core.Products.Entities.OrderItem", b =>
                {
                    b.HasOne("App.Domain.Core.Products.Entities.BoothProduct", "BoothProduct")
                        .WithMany("OrderItems")
                        .HasForeignKey("BoothProductid")
                        .IsRequired()
                        .HasConstraintName("FK_OrderItems_BoothProduct");

                    b.HasOne("App.Domain.Core.Products.Entities.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("FK_OrderItems_Orders");

                    b.Navigation("BoothProduct");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("App.Domain.Core.Products.Entities.ProductAction", b =>
                {
                    b.HasOne("App.Domain.Core.Booths.Entities.Booth", "Booth")
                        .WithMany("Actions")
                        .HasForeignKey("BoothId")
                        .IsRequired()
                        .HasConstraintName("FK_Actions_Booths");

                    b.HasOne("App.Domain.Core.User.Entities.Customer", "BoothNavigation")
                        .WithMany("Actions")
                        .HasForeignKey("BoothId")
                        .IsRequired()
                        .HasConstraintName("FK_Actions_Customers");

                    b.HasOne("App.Domain.Core.Products.Entities.Product", "Product")
                        .WithMany("Actions")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_Actions_Products");

                    b.Navigation("Booth");

                    b.Navigation("BoothNavigation");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("App.Domain.Core.User.Entities.Admin", b =>
                {
                    b.HasOne("App.Domain.Core.Common.Entities.Picture", "ProfilePicture")
                        .WithMany()
                        .HasForeignKey("ProfilePictureId")
                        .IsRequired()
                        .HasConstraintName("FK_Admins_Pictures");

                    b.Navigation("ProfilePicture");
                });

            modelBuilder.Entity("App.Domain.Core.User.Entities.Customer", b =>
                {
                    b.HasOne("App.Domain.Core.User.Entities.Address", "Address")
                        .WithMany("Customers")
                        .HasForeignKey("AddressId")
                        .IsRequired()
                        .HasConstraintName("FK_Customers_Addresses");

                    b.HasOne("App.Domain.Core.Common.Entities.Picture", "ProfilePicture")
                        .WithMany("Customers")
                        .HasForeignKey("ProfilePictureId")
                        .IsRequired()
                        .HasConstraintName("FK_Customers_Pictures");

                    b.Navigation("Address");

                    b.Navigation("ProfilePicture");
                });

            modelBuilder.Entity("App.Domain.Core.User.Entities.Seller", b =>
                {
                    b.HasOne("App.Domain.Core.User.Entities.Address", "Address")
                        .WithMany("Sellers")
                        .HasForeignKey("AddressId")
                        .IsRequired()
                        .HasConstraintName("FK_Sellers_Addresses");

                    b.HasOne("App.Domain.Core.Booths.Entities.Booth", "Booth")
                        .WithMany("Sellers")
                        .HasForeignKey("BoothId")
                        .IsRequired()
                        .HasConstraintName("FK_Sellers_Booths");

                    b.HasOne("App.Domain.Core.Common.Entities.Picture", "ProfilePicture")
                        .WithMany("Sellers")
                        .HasForeignKey("ProfilePictureId")
                        .IsRequired()
                        .HasConstraintName("FK_Sellers_Pictures");

                    b.Navigation("Address");

                    b.Navigation("Booth");

                    b.Navigation("ProfilePicture");
                });

            modelBuilder.Entity("PictureProduct", b =>
                {
                    b.HasOne("App.Domain.Core.Common.Entities.Picture", null)
                        .WithMany()
                        .HasForeignKey("PicturesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Domain.Core.Products.Entities.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("App.Domain.Core.Booths.Entities.Booth", b =>
                {
                    b.Navigation("Actions");

                    b.Navigation("BoothProducts");

                    b.Navigation("Sellers");
                });

            modelBuilder.Entity("App.Domain.Core.Booths.Entities.Medal", b =>
                {
                    b.Navigation("Booths");
                });

            modelBuilder.Entity("App.Domain.Core.Common.Entities.Picture", b =>
                {
                    b.Navigation("Booths");

                    b.Navigation("Categories");

                    b.Navigation("Customers");

                    b.Navigation("Sellers");
                });

            modelBuilder.Entity("App.Domain.Core.Products.Entities.BoothProduct", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("App.Domain.Core.Products.Entities.Category", b =>
                {
                    b.Navigation("InverseParent");
                });

            modelBuilder.Entity("App.Domain.Core.Products.Entities.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("App.Domain.Core.Products.Entities.Product", b =>
                {
                    b.Navigation("Actions");

                    b.Navigation("BoothProducts");
                });

            modelBuilder.Entity("App.Domain.Core.Products.Entities.ProductAction", b =>
                {
                    b.Navigation("Bids");
                });

            modelBuilder.Entity("App.Domain.Core.User.Entities.Address", b =>
                {
                    b.Navigation("Customers");

                    b.Navigation("Sellers");
                });

            modelBuilder.Entity("App.Domain.Core.User.Entities.Customer", b =>
                {
                    b.Navigation("Actions");

                    b.Navigation("Bids");

                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
